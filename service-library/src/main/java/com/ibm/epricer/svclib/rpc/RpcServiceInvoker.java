package com.ibm.epricer.svclib.rpc;

import static com.ibm.epricer.svclib.ServiceMessage.Status.BUSINESS_EXCEPTION;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ibm.epricer.svclib.BusinessRuleException;
import com.ibm.epricer.svclib.ServiceMessage;

/**
 * The invoker is communication-technology-agnostic and can be used with any wire-level protocols,
 * like HTTP, JMS, gRPC, AMQP, etc.
 * 
 * Invalid message headers will cause HTTP 500 being generated by Spring Boot.
 * 
 * @author Kiran Chowdhury
 */

public interface RpcServiceInvoker {
    ServiceMessage invoke(ServiceMessage reqMsg);
}

@Component
class RpcServiceInvokerImpl implements RpcServiceInvoker {
    private static final Logger LOG = LoggerFactory.getLogger(RpcServiceInvoker.class);
    private static final String SVCID_PATTERN = "^[a-z][a-z0-9-]+[a-z0-9]$";

    @Autowired
    private RpcServiceEndpointMap endpointMap;

    @Autowired
    RpcServiceEndpointInvoker transactionalInvoker;

    @Autowired
    private ObjectMapper mapper;

    @Value("${epricer.service-id}")
    private String serviceId;

    @Override
    public ServiceMessage invoke(ServiceMessage reqMsg) {

        validateInputMessageHeaders(reqMsg);

        String endpointId = reqMsg.getEndpointId();
        int endpointVer = reqMsg.getEndpointVer();

        RpcServiceEndpointMetadata endpoint = endpointMap.getEndpointInfo(endpointId, endpointVer);
        if (endpoint == null) {
            throw new IllegalArgumentException(
                    "Service endpoint " + endpointId + ":" + endpointVer + " does not exist");
        }

        try {

            return transactionalInvoker.callEndpoint(endpoint, reqMsg);

        } catch (BusinessRuleException bre) {

            if (bre.isUpstream()) {
                /*
                 * Business rule exceptions from upstream services must not be passed through back to the caller
                 * because they are not part of this service interface. If needed, create new business rule
                 * exception and add the upstream one as a cause.
                 */
                throw new IllegalStateException("Unhandled upstream business rule exception", bre);
            }
            LOG.error("Business rule violation, returning error response", bre);
            ServiceMessage errMsg = new ServiceMessage();
            errMsg.setThrows(true);
            errMsg.setStatus(BUSINESS_EXCEPTION);
            errMsg.setPayload(marshallErrorResponse(bre.export(serviceId)));
            return errMsg;
        }
    }

    private void validateInputMessageHeaders(ServiceMessage svcMsg) {
        String s = svcMsg.getServiceId();
        if (s == null || s.length() == 0 || !s.matches(SVCID_PATTERN)) {
            throw new IllegalStateException("Invalid or missing service id header: " + s);
        }

        if (!this.serviceId.equalsIgnoreCase(s)) {
            throw new IllegalStateException(
                    "This service id '" + this.serviceId + "' does not match the request message header value: " + s);
        }

        String e = svcMsg.getEndpointId();
        if (e == null || e.length() == 0 || !e.matches(SVCID_PATTERN)) {
            throw new IllegalStateException("Invalid or missing end-point id header: " + e);
        }

        int v = svcMsg.getEndpointVer();
        if (v <= 0) {
            throw new IllegalStateException("Invalid end-point version: " + v);
        }
    }

    private String marshallErrorResponse(Object result) {
        String response = null;
        try {
            response = mapper.writeValueAsString(result);
        } catch (JsonProcessingException e) {
            throw new IllegalStateException("Failed to marshall service error response into JSON", e);
        }
        return response;
    }
}
